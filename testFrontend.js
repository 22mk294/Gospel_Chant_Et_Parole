const axios = require('axios');

const API_BASE_URL = 'http://localhost:5000/api';

// Configuration avec timeout
const api = axios.create({
  baseURL: API_BASE_URL,
  timeout: 10000,
  headers: {
    'Content-Type': 'application/json',
  }
});

async function testCompleteAPI() {
  try {
    console.log('üöÄ Test complet de l\'API avec interface admin');
    console.log('================================================');
    
    // 1. Test de connexion
    console.log('\n1. Test de connexion admin...');
    const loginResponse = await api.post('/auth/login', {
      username: 'admin',
      password: 'admin123'
    });
    console.log('‚úÖ Connexion r√©ussie');
    
    // R√©cup√©ration du token
    const token = loginResponse.data.token;
    api.defaults.headers.common['Authorization'] = `Bearer ${token}`;
    
    // 2. Test r√©cup√©ration des statistiques
    console.log('\n2. Test statistiques dashboard...');
    try {
      const statsResponse = await api.get('/stats/dashboard');
      console.log('‚úÖ Statistiques r√©cup√©r√©es:', statsResponse.data);
    } catch (error) {
      console.log('‚ùå Erreur stats:', error.response?.data || error.message);
    }
    
    // 3. Test r√©cup√©ration des cat√©gories
    console.log('\n3. Test r√©cup√©ration cat√©gories...');
    const categoriesResponse = await api.get('/categories');
    console.log('‚úÖ Cat√©gories r√©cup√©r√©es:', categoriesResponse.data.data ? categoriesResponse.data.data.length : categoriesResponse.data.length, 'cat√©gories');
    
    // 4. Test r√©cup√©ration des chants
    console.log('\n4. Test r√©cup√©ration chants...');
    const chantsResponse = await api.get('/chants');
    console.log('‚úÖ Chants r√©cup√©r√©s:', chantsResponse.data.data ? chantsResponse.data.data.length : chantsResponse.data.length, 'chants');
    
    // 5. Test cr√©ation d'une cat√©gorie
    console.log('\n5. Test cr√©ation cat√©gorie...');
    const newCategory = {
      name: 'Test Frontend',
      description: 'Cat√©gorie de test pour le frontend'
    };
    
    try {
      const createCategoryResponse = await api.post('/categories', newCategory);
      console.log('‚úÖ Cat√©gorie cr√©√©e:', createCategoryResponse.data);
    } catch (error) {
      console.log('‚ùå Erreur cr√©ation cat√©gorie:', error.response?.data || error.message);
    }
    
    // 6. Test cr√©ation d'un chant
    console.log('\n6. Test cr√©ation chant...');
    const newChant = {
      title: 'Chant de test frontend',
      artist: 'Test Artist',
      category_id: 1,
      lyrics: 'Paroles de test pour le frontend',
      duration: 180,
      language: 'fr',
      tags: 'test,frontend'
    };
    
    try {
      const createChantResponse = await api.post('/chants', newChant);
      console.log('‚úÖ Chant cr√©√©:', createChantResponse.data);
    } catch (error) {
      console.log('‚ùå Erreur cr√©ation chant:', error.response?.data || error.message);
    }
    
    // 7. Test avec param√®tres de pagination
    console.log('\n7. Test chants avec pagination...');
    const chantsWithPagination = await api.get('/chants?limit=5&offset=0');
    console.log('‚úÖ Chants avec pagination:', chantsWithPagination.data.data ? chantsWithPagination.data.data.length : chantsWithPagination.data.length, 'chants');
    
    // 8. Test recherche de chants
    console.log('\n8. Test recherche chants...');
    const searchResponse = await api.get('/chants?search=test');
    console.log('‚úÖ Recherche effectu√©e:', searchResponse.data.data ? searchResponse.data.data.length : searchResponse.data.length, 'r√©sultats');
    
    console.log('\n================================================');
    console.log('‚úÖ Tous les tests termin√©s avec succ√®s!');
    
  } catch (error) {
    console.error('‚ùå Erreur lors du test:', error.response?.data || error.message);
    if (error.response) {
      console.error('Status:', error.response.status);
      console.error('Data:', error.response.data);
    }
  }
}

// Ex√©cution du test
testCompleteAPI();
