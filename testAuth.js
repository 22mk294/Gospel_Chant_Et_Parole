const axios = require('axios');

async function testAuthentication() {
    console.log('üîß Test d\'authentification et d\'acc√®s aux donn√©es...\n');
    
    try {
        // 1. Test de connexion
        console.log('1. üîê Test de connexion...');
        const loginResponse = await axios.post('http://localhost:5000/api/auth/login', {
            username: 'joelmike',
            password: 'Beckyshawetu268563'
        });
        
        console.log('‚úÖ Connexion r√©ussie');
        console.log('Token re√ßu:', loginResponse.data.token ? 'Oui' : 'Non');
        
        const token = loginResponse.data.token;
        
        // 2. Test d'acc√®s aux cat√©gories sans token
        console.log('\n2. üìÇ Test d\'acc√®s aux cat√©gories sans token...');
        try {
            const categoriesResponse = await axios.get('http://localhost:5000/api/categories');
            console.log('‚úÖ Cat√©gories r√©cup√©r√©es sans token');
            console.log('Nombre de cat√©gories:', categoriesResponse.data.total);
        } catch (error) {
            console.log('‚ùå Erreur sans token:', error.response?.status, error.response?.data?.message);
        }
        
        // 3. Test d'acc√®s aux cat√©gories avec token
        console.log('\n3. üîë Test d\'acc√®s aux cat√©gories avec token...');
        try {
            const categoriesWithTokenResponse = await axios.get('http://localhost:5000/api/categories', {
                headers: {
                    'Authorization': `Bearer ${token}`
                }
            });
            console.log('‚úÖ Cat√©gories r√©cup√©r√©es avec token');
            console.log('Nombre de cat√©gories:', categoriesWithTokenResponse.data.total);
        } catch (error) {
            console.log('‚ùå Erreur avec token:', error.response?.status, error.response?.data?.message);
        }
        
        // 4. Test d'acc√®s aux chants
        console.log('\n4. üéµ Test d\'acc√®s aux chants...');
        try {
            const chantsResponse = await axios.get('http://localhost:5000/api/chants');
            console.log('‚úÖ Chants r√©cup√©r√©s');
            console.log('Nombre de chants:', chantsResponse.data.total);
        } catch (error) {
            console.log('‚ùå Erreur chants:', error.response?.status, error.response?.data?.message);
        }
        
        // 5. Test d'acc√®s aux statistiques
        console.log('\n5. üìä Test d\'acc√®s aux statistiques...');
        try {
            const statsResponse = await axios.get('http://localhost:5000/api/stats/dashboard', {
                headers: {
                    'Authorization': `Bearer ${token}`
                }
            });
            console.log('‚úÖ Statistiques r√©cup√©r√©es');
            console.log('Stats:', statsResponse.data);
        } catch (error) {
            console.log('‚ùå Erreur stats:', error.response?.status, error.response?.data?.message);
        }
        
        // 6. Test de cr√©ation d'une cat√©gorie
        console.log('\n6. ‚ûï Test de cr√©ation d\'une cat√©gorie...');
        try {
            const createResponse = await axios.post('http://localhost:5000/api/categories', {
                name: 'Test Category',
                description: 'Cat√©gorie de test'
            }, {
                headers: {
                    'Authorization': `Bearer ${token}`
                }
            });
            console.log('‚úÖ Cat√©gorie cr√©√©e');
            console.log('Nouvelle cat√©gorie:', createResponse.data);
        } catch (error) {
            console.log('‚ùå Erreur cr√©ation:', error.response?.status, error.response?.data?.message);
        }
        
    } catch (error) {
        console.error('‚ùå Erreur g√©n√©rale:', error.message);
    }
}

// Ex√©cuter le test
if (require.main === module) {
    testAuthentication();
}

module.exports = { testAuthentication };
