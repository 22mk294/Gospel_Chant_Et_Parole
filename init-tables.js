// Script pour initialiser les tables PostgreSQL
require('dotenv').config();
const { Sequelize } = require('sequelize');

async function initializeTables() {
  console.log('üîÑ Initialisation des tables PostgreSQL...');
  
  const sequelize = new Sequelize(process.env.DATABASE_URL, {
    dialect: 'postgres',
    dialectOptions: {
      ssl: {
        require: true,
        rejectUnauthorized: false
      }
    },
    logging: false
  });

  try {
    await sequelize.authenticate();
    console.log('‚úÖ Connexion PostgreSQL √©tablie');
    
    // Importer les mod√®les
    const { Admin, Category, Chant } = require('./serveur/models');
    
    // Synchroniser les tables
    await sequelize.sync({ force: false, alter: true });
    console.log('‚úÖ Tables synchronis√©es');
    
    // Cr√©er des donn√©es de test
    const adminCount = await Admin.count();
    if (adminCount === 0) {
      await Admin.create({
        username: 'admin',
        password: 'admin123',
        email: 'admin@gospel.com'
      });
      console.log('‚úÖ Admin par d√©faut cr√©√©');
    }
    
    const categoryCount = await Category.count();
    if (categoryCount === 0) {
      await Category.bulkCreate([
        { name: 'Louange', description: 'Chants de louange' },
        { name: 'Adoration', description: 'Chants d\'adoration' },
        { name: '√âvang√©lisation', description: 'Chants d\'√©vang√©lisation' }
      ]);
      console.log('‚úÖ Cat√©gories par d√©faut cr√©√©es');
    }
    
    await sequelize.close();
    console.log('üéâ Initialisation termin√©e avec succ√®s !');
    
  } catch (error) {
    console.error('‚ùå Erreur lors de l\'initialisation:', error);
    process.exit(1);
  }
}

initializeTables();
