#!/usr/bin/env node

// Script de validation de la configuration PostgreSQL avec les vraies donn√©es
const { Client } = require('pg');

// Configuration avec vos vraies donn√©es
const config = {
  host: 'dpg-d1ptb7vfte5s73cnq080-a.oregon-postgres.render.com',
  port: 5432,
  database: 'gospelchantetparole',
  user: 'gospeluser',
  password: '9UrdWQbfUlBcbFjWxWKsVYX8RlQvr8e0',
  ssl: {
    rejectUnauthorized: false
  }
};

const DATABASE_URL = 'postgresql://gospeluser:9UrdWQbfUlBcbFjWxWKsVYX8RlQvr8e0@dpg-d1ptb7vfte5s73cnq080-a.oregon-postgres.render.com/gospelchantetparole';

async function validateDatabaseConfig() {
  console.log('üîç Validation de la configuration PostgreSQL...\n');
  
  console.log('üìã Configuration d√©tect√©e:');
  console.log(`   Host: ${config.host}`);
  console.log(`   Port: ${config.port}`);
  console.log(`   Database: ${config.database}`);
  console.log(`   User: ${config.user}`);
  console.log(`   Password: ${config.password.substring(0, 5)}...`);
  console.log(`   SSL: Activ√©\n`);
  
  try {
    console.log('üîÑ Test de connexion avec l\'URL compl√®te...');
    
    // Test avec l'URL compl√®te
    const client = new Client({
      connectionString: DATABASE_URL,
      ssl: {
        rejectUnauthorized: false
      }
    });
    
    await client.connect();
    console.log('‚úÖ Connexion PostgreSQL r√©ussie !');
    
    // Test de base de donn√©es
    const result = await client.query('SELECT NOW() as current_time, version() as pg_version');
    console.log(`‚è∞ Heure serveur: ${result.rows[0].current_time}`);
    console.log(`üóÑÔ∏è  Version PostgreSQL: ${result.rows[0].pg_version.split(' ')[0]}`);
    
    // V√©rifier les tables existantes
    const tablesResult = await client.query(`
      SELECT tablename 
      FROM pg_tables 
      WHERE schemaname = 'public'
      ORDER BY tablename;
    `);
    
    console.log('\nüìä Tables dans la base:');
    if (tablesResult.rows.length === 0) {
      console.log('   ‚ùå Aucune table trouv√©e');
      console.log('   üí° Apr√®s d√©ploiement, ex√©cutez: npm run init-postgres');
    } else {
      tablesResult.rows.forEach(row => {
        console.log(`   ‚úÖ ${row.tablename}`);
      });
    }
    
    // Test de cr√©ation de table (pour v√©rifier les permissions)
    try {
      await client.query('CREATE TABLE IF NOT EXISTS test_connection (id SERIAL PRIMARY KEY)');
      await client.query('DROP TABLE IF EXISTS test_connection');
      console.log('‚úÖ Permissions de cr√©ation/suppression OK');
    } catch (permError) {
      console.log('‚ö†Ô∏è  Permissions limit√©es (normal pour certains h√©bergeurs)');
    }
    
    await client.end();
    
    console.log('\nüéâ Configuration valid√©e avec succ√®s !');
    console.log('\nüìã Variables d\'environnement Render √† configurer:');
    console.log('NODE_ENV=production');
    console.log('PORT=5000');
    console.log(`DATABASE_URL=${DATABASE_URL}`);
    console.log('JWT_SECRET=gospel-super-secret-jwt-key-2025-production-render');
    console.log('CORS_ORIGIN=*');
    
    console.log('\nüöÄ Pr√™t pour le d√©ploiement Render !');
    
  } catch (error) {
    console.error('‚ùå Erreur de validation:', error.message);
    console.log('\nüîß V√©rifications √† faire:');
    console.log('1. La base de donn√©es PostgreSQL est-elle active sur Render ?');
    console.log('2. Les informations de connexion sont-elles correctes ?');
    console.log('3. Y a-t-il des restrictions d\'acc√®s IP ?');
    console.log('4. Le mot de passe a-t-il √©t√© chang√© ?');
    
    console.log('\nüìã Informations utilis√©es:');
    console.log(`URL: ${DATABASE_URL}`);
  }
}

// Fonction pour afficher l'URL de configuration
function showConfigurationURL() {
  console.log('\nüìù URL de configuration valid√©e:');
  console.log(DATABASE_URL);
  console.log('\nüìã Cette URL est pr√™te √† √™tre utilis√©e dans Render !');
}

// Ex√©cution du script
if (require.main === module) {
  if (process.argv.includes('--url')) {
    showConfigurationURL();
  } else {
    validateDatabaseConfig();
  }
}

module.exports = { validateDatabaseConfig, showConfigurationURL };
