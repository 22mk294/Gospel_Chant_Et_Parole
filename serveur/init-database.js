const { sequelize } = require('./models');

async function initializeDatabase() {
  try {
    console.log('üîÑ Initialisation de la base de donn√©es...');
    
    // Authentification
    await sequelize.authenticate();
    console.log('‚úÖ Connexion √† la base de donn√©es √©tablie');
    
    // Synchronisation des mod√®les
    await sequelize.sync({ force: false, alter: true });
    console.log('‚úÖ Synchronisation des mod√®les termin√©e');
    
    // Cr√©ation des donn√©es de test pour les nouvelles tables
    const { Admin, Category, Chant, Utilisateur, Tag, Evenement } = require('./models');
    
    // V√©rifier si l'admin par d√©faut existe
    const adminExists = await Admin.findOne({ where: { username: 'admin' } });
    if (!adminExists) {
      await Admin.create({
        username: 'admin',
        password: 'admin123',
        email: 'admin@gospel.com'
      });
      console.log('‚úÖ Admin par d√©faut cr√©√©');
    }
    
    // Cr√©er quelques tags par d√©faut
    const defaultTags = [
      { nom: 'Louange', couleur: '#FF6B6B', description: 'Chants de louange' },
      { nom: 'Adoration', couleur: '#4ECDC4', description: 'Chants d\'adoration' },
      { nom: 'Pri√®re', couleur: '#45B7D1', description: 'Chants de pri√®re' },
      { nom: 'No√´l', couleur: '#96CEB4', description: 'Chants de No√´l' },
      { nom: 'P√¢ques', couleur: '#FFEAA7', description: 'Chants de P√¢ques' },
      { nom: 'Fran√ßais', couleur: '#DDA0DD', description: 'Chants en fran√ßais' },
      { nom: 'Anglais', couleur: '#98D8C8', description: 'Chants en anglais' },
      { nom: 'Moderne', couleur: '#F7DC6F', description: 'Style moderne' },
      { nom: 'Traditionnel', couleur: '#BB8FCE', description: 'Style traditionnel' }
    ];
    
    for (const tagData of defaultTags) {
      const tagExists = await Tag.findOne({ where: { nom: tagData.nom } });
      if (!tagExists) {
        await Tag.create(tagData);
        console.log(`‚úÖ Tag "${tagData.nom}" cr√©√©`);
      }
    }
    
    // Cr√©er un utilisateur de d√©monstration
    const demoUser = await Utilisateur.findOne({ where: { email: 'demo@gospel.com' } });
    if (!demoUser) {
      await Utilisateur.create({
        nom: 'Utilisateur',
        prenom: 'Demo',
        email: 'demo@gospel.com',
        mot_de_passe: 'demo123',
        date_naissance: new Date('1990-01-01'),
        sexe: 'M',
        pays: 'France',
        ville: 'Paris',
        statut: 'actif',
        email_verifie: true,
        preferences: {
          notifications_email: true,
          notifications_push: true,
          qualite_audio: 'haute',
          lecture_automatique: true
        }
      });
      console.log('‚úÖ Utilisateur de d√©monstration cr√©√©');
    }
    
    // Cr√©er un √©v√©nement de d√©monstration
    const demoEvent = await Evenement.findOne({ where: { titre: 'Concert Gospel de No√´l' } });
    if (!demoEvent) {
      await Evenement.create({
        titre: 'Concert Gospel de No√´l',
        description: 'Un magnifique concert gospel pour c√©l√©brer No√´l avec des chants traditionnels et modernes.',
        date_debut: new Date('2024-12-24T19:00:00'),
        date_fin: new Date('2024-12-24T22:00:00'),
        lieu: '√âglise Saint-Pierre',
        adresse: '123 Rue de la Paix, Paris, France',
        type: 'concert',
        organisateur: 'Chorale Gospel Unity',
        contact: 'contact@gospelunity.fr',
        prix: 15.00,
        capacite_max: 200,
        statut: 'publie'
      });
      console.log('‚úÖ √âv√©nement de d√©monstration cr√©√©');
    }
    
    console.log('üéâ Initialisation de la base de donn√©es termin√©e avec succ√®s !');
    
    // Afficher les statistiques
    const stats = await Promise.all([
      Admin.count(),
      Category.count(),
      Chant.count(),
      Utilisateur.count(),
      Tag.count(),
      Evenement.count()
    ]);
    
    console.log('\nüìä Statistiques de la base de donn√©es :');
    console.log(`- Admins: ${stats[0]}`);
    console.log(`- Cat√©gories: ${stats[1]}`);
    console.log(`- Chants: ${stats[2]}`);
    console.log(`- Utilisateurs: ${stats[3]}`);
    console.log(`- Tags: ${stats[4]}`);
    console.log(`- √âv√©nements: ${stats[5]}`);
    
  } catch (error) {
    console.error('‚ùå Erreur lors de l\'initialisation de la base de donn√©es:', error);
  } finally {
    await sequelize.close();
  }
}

// Ex√©cuter l'initialisation si ce fichier est appel√© directement
if (require.main === module) {
  initializeDatabase();
}

module.exports = initializeDatabase;
