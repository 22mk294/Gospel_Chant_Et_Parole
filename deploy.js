#!/usr/bin/env node

const { execSync } = require('child_process');
const path = require('path');
const fs = require('fs');

console.log('üöÄ D√©marrage du processus de d√©ploiement...\n');

// Configuration
const rootDir = process.cwd();
const adminDir = path.join(rootDir, 'admin');

// Fonction pour ex√©cuter des commandes
function runCommand(command, description) {
  console.log(`üì¶ ${description}...`);
  try {
    execSync(command, { stdio: 'inherit', cwd: rootDir });
    console.log(`‚úÖ ${description} termin√©\n`);
  } catch (error) {
    console.error(`‚ùå Erreur lors de ${description}:`, error.message);
    process.exit(1);
  }
}

// Fonction pour v√©rifier les fichiers
function checkFiles() {
  console.log('üîç V√©rification des fichiers...');
  
  // V√©rifier que le logo existe
  const logoPath = path.join(adminDir, 'src', 'assets', 'images', 'logoGospel.PNG');
  if (!fs.existsSync(logoPath)) {
    console.error('‚ùå Logo manquant:', logoPath);
    process.exit(1);
  }
  console.log('‚úÖ Logo trouv√©:', logoPath);
  
  // V√©rifier le composant Logo
  const logoComponent = path.join(adminDir, 'src', 'components', 'common', 'Logo.jsx');
  if (!fs.existsSync(logoComponent)) {
    console.error('‚ùå Composant Logo manquant:', logoComponent);
    process.exit(1);
  }
  console.log('‚úÖ Composant Logo trouv√©:', logoComponent);
  
  // V√©rifier la configuration backend
  const serverFile = path.join(rootDir, 'serveur', 'server.js');
  if (!fs.existsSync(serverFile)) {
    console.error('‚ùå Fichier serveur manquant:', serverFile);
    process.exit(1);
  }
  console.log('‚úÖ Serveur backend trouv√©:', serverFile);
  
  console.log('‚úÖ Tous les fichiers requis sont pr√©sents\n');
}

// Fonction pour mettre √† jour les variables d'environnement
function updateEnvVars() {
  console.log('üîß Mise √† jour des variables d'environnement...');
  
  // V√©rifier .env
  const envPath = path.join(rootDir, '.env');
  if (fs.existsSync(envPath)) {
    console.log('‚úÖ Fichier .env trouv√©');
  } else {
    console.log('‚ö†Ô∏è  Fichier .env manquant - cr√©ation d\'un exemple...');
    const envExample = `NODE_ENV=production
PORT=5000
JWT_SECRET=your_jwt_secret_here
DATABASE_URL=your_database_url_here
`;
    fs.writeFileSync(envPath, envExample);
    console.log('‚úÖ Fichier .env cr√©√© - veuillez le configurer');
  }
  
  // V√©rifier .env.production pour le frontend
  const frontendEnvPath = path.join(adminDir, '.env.production');
  if (fs.existsSync(frontendEnvPath)) {
    console.log('‚úÖ Fichier .env.production (frontend) trouv√©');
  } else {
    console.log('‚ö†Ô∏è  Cr√©ation de .env.production pour le frontend...');
    const frontendEnv = `REACT_APP_API_URL=https://votre-api.onrender.com
REACT_APP_ENV=production
`;
    fs.writeFileSync(frontendEnvPath, frontendEnv);
    console.log('‚úÖ Fichier .env.production cr√©√© pour le frontend');
  }
  
  console.log('‚úÖ Variables d\'environnement v√©rifi√©es\n');
}

// Fonction principale
async function deploy() {
  try {
    console.log('üéØ Gospel Chant Et Parole - D√©ploiement avec Logo');
    console.log('================================================\n');
    
    // √âtape 1: V√©rifications pr√©liminaires
    checkFiles();
    updateEnvVars();
    
    // √âtape 2: Installation des d√©pendances backend
    runCommand('npm install', 'Installation des d√©pendances backend');
    
    // √âtape 3: Installation des d√©pendances frontend
    runCommand('cd admin && npm install', 'Installation des d√©pendances frontend');
    
    // √âtape 4: Build du frontend avec le logo
    runCommand('cd admin && npm run build', 'Construction du frontend avec logo');
    
    // √âtape 5: V√©rification du build
    console.log('üîç V√©rification du build...');
    const distPath = path.join(adminDir, 'dist');
    if (fs.existsSync(distPath)) {
      const files = fs.readdirSync(path.join(distPath, 'assets'));
      const logoFile = files.find(f => f.includes('logoGospel'));
      if (logoFile) {
        console.log(`‚úÖ Logo int√©gr√© au build: ${logoFile}`);
      } else {
        console.log('‚ö†Ô∏è  Logo non trouv√© dans le build');
      }
    }
    
    // √âtape 6: Tests (optionnel)
    console.log('üß™ Tests (optionnel)...');
    try {
      runCommand('npm test', 'Ex√©cution des tests');
    } catch (error) {
      console.log('‚ö†Ô∏è  Tests √©chou√©s - continuant le d√©ploiement...');
    }
    
    // √âtape 7: Informations de d√©ploiement
    console.log('üìù Informations de d√©ploiement:');
    console.log('================================');
    console.log('‚Ä¢ Backend: Pr√™t pour Render');
    console.log('‚Ä¢ Frontend: Build termin√© avec logo');
    console.log('‚Ä¢ Logo: Int√©gr√© dans tous les composants');
    console.log('‚Ä¢ Favicon: Mis √† jour');
    console.log('‚Ä¢ Documentation: Swagger prot√©g√©e');
    console.log('‚Ä¢ Param√®tres: Page compl√®te avec monitoring');
    
    console.log('\nüéâ D√©ploiement pr√©par√© avec succ√®s!');
    console.log('\nüìã Prochaines √©tapes:');
    console.log('1. Committez les changements: git add . && git commit -m "Int√©gration logo et am√©liorations"');
    console.log('2. Poussez vers GitHub: git push origin main');
    console.log('3. Render d√©tectera automatiquement les changements');
    console.log('4. V√©rifiez le d√©ploiement sur votre URL Render');
    
  } catch (error) {
    console.error('‚ùå Erreur lors du d√©ploiement:', error.message);
    process.exit(1);
  }
}

// Ex√©cuter le d√©ploiement
deploy();
