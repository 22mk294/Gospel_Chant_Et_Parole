// Script pour tester les mod√®les sans connexion DB
const path = require('path');

// Mock Sequelize pour √©viter la connexion √† la base de donn√©es
const mockSequelize = {
  define: () => ({
    hasMany: () => {},
    belongsTo: () => {},
    belongsToMany: () => {},
    hasOne: () => {}
  }),
  authenticate: () => Promise.resolve(),
  sync: () => Promise.resolve(),
  close: () => Promise.resolve()
};

// Mock du module de configuration database
const mockConfig = {
  database: mockSequelize
};

// Remplacer temporairement le module de configuration
const Module = require('module');
const originalRequire = Module.prototype.require;

Module.prototype.require = function(id) {
  if (id === '../config/database') {
    return mockSequelize;
  }
  return originalRequire.apply(this, arguments);
};

try {
  console.log('üîÑ Test des mod√®les...');
  
  // Tester le chargement des mod√®les
  const models = require('./serveur/models');
  console.log('‚úÖ Mod√®les charg√©s avec succ√®s !');
  
  // Afficher la liste des mod√®les
  console.log('\nüìã Mod√®les disponibles :');
  Object.keys(models).forEach(modelName => {
    if (modelName !== 'sequelize') {
      console.log(`  - ${modelName}`);
    }
  });
  
  console.log('\nüéâ Tous les mod√®les sont valides !');
  
} catch (error) {
  console.error('‚ùå Erreur lors du chargement des mod√®les:', error.message);
  console.error('Stack:', error.stack);
} finally {
  // Restaurer le require original
  Module.prototype.require = originalRequire;
}
